{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "FortiWeb Autoscale Solution (Existing VPC). This template deploys Fortinet FortiWeb cluster into an existing VPC with a Multi-AZ Autoscale group with Lambda and LifecycleHook. Please see the Quick Start documentation for more details. **WARNING** You will be billed for the FortiWeb On-Demand instances and related AWS resources if you create a stack from this template.",
    "Parameters": {
        "QSS3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$|^$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "",
            "Description": "The name of the S3 bucket in which the FortiWeb autoscaling deployment package is stored, for example, aws-quickstart. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "QSS3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$|^$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "",
            "Description": "The path of the FortiWeb autoscaling deployment package in s3, for example: quickstart-fortinet-FortiWeb/. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). If there is no S3 key prefix, set it empty."
        },
        "CustomIdentifier": {
            "Type": "String",
            "Default": "fwbASG",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers. Max length is 10.",
            "Description": "A custom identifier as resource name prefix. Must be at most 10 characters long and only contain uppercase, lowercase letters, and numbers. Max length is 10."
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "The existing VPC IDs where you deploy the Auto-Scaling group and related resources. The VPC must have the option 'DNS hostnames' enabled."
        },
        "VPCCIDR": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the selected VPC."
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Subnet 1, which is located in Availability Zone 1."
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Subnet 2, which is located in Availability Zone 2."
        },
        "FortiWebVersionInternal": {
            "Type": "String",
            "Default": "LATEST",
            "ConstraintDescription": "must be a valid FortiWeb version.",
            "Description": "The version of FortiWeb.",
            "AllowedValues": [
                "LATEST"
            ]
        },
        "FortiWebInstanceType": {
            "Type": "String",
            "Default": "c5.large",
            "AllowedValues": [
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "r5.large",
                "r5.xlarge",
                "r5.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Description": "Instance type to launch as FortiWeb On-Demand instances. For more information about instance types, see https://aws.amazon.com/ec2/instance-types/"
        },
        "ExpireLifecycleEntry": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "FortiWeb instance lifecycle expiry entry (in seconds). Minimum is 60. Maximum is 3600."
        },
        "FortiWebAsgCooldown": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "Auto-Scaling group waits for the cooldown period (in seconds) to complete before resuming scaling activities. Minimum is 60. Maximum is 3600."
        },
        "FortiWebAsgCapacityBYOL": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "MaxValue": 16,
            "ConstraintDescription": "must be a valid number not less than 0. Minimum is 0. Sum of \"Desired BYOL FortiWeb capacity\" and \"Maximum On-Demand FortiWeb group size\" should not be bigger than 16.",
            "Description": "The number of BYOL FortiWeb instance. For specific use cases, set to 0 for On-Demand-only, and >= 1 for hybrid licensing. Please note that you need to provide an equal number of licenses. The total number of BYOL and On-Demand FortiWeb needs to be less than or equal to 16."
        },
        "FortiWebAsgDesiredCapacityOnDemand": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0. Value must be between \"Minimum On-Demand FortiWeb group size\" and \"Maximum On-Demand FortiWeb group size\".",
            "Description": "The initial number of On-Demand FortiWeb instance. Value must be between \"Minimum On-Demand FortiWeb group size\" and \"Maximum On-Demand FortiWeb group size\". The total number of BYOL and On-Demand FortiWeb needs to be less than or equal to 16."
        },
        "FortiWebAsgMinSizeOnDemand": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0. Value should be less than or equal to \"Desired On-Demand FortiWeb capacity\".",
            "Description": "Minimum number of On-Demand FortiWeb instances in the Auto-Scaling Group. Value should be less than or equal to \"Desired On-Demand FortiWeb capacity\"."
        },
        "FortiWebAsgMaxSizeOnDemand": {
            "Type": "Number",
            "Default": 4,
            "MinValue": 1,
            "MaxValue": 16,
            "ConstraintDescription": "must be a valid number between 1 and 16. Value should be greater than or equal to \"Desired On-Demand FortiWeb capacity\". Sum of \"Desired BYOL FortiWeb capacity\" and \"Maximum On-Demand FortiWeb group size\" should not be bigger than 16.",
            "Description": "Maximum number of On-Demand FortiWeb instances in the Auto-Scaling Group. Maximum is 16. Value should be greater than or equal to \"Desired On-Demand FortiWeb capacity\"."
        },
        "FortiWebAsgHealthCheckGracePeriod": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "The length of time (in seconds) that Auto-Scaling waits before checking an instance's health status. Minimum is 60."
        },
        "FortiWebAsgScaleInThreshold": {
            "Type": "Number",
            "Default": 25,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100, and be less than \"Scale-out threshold\".",
            "Description": "The average CPU threshold (in percentage) for the FortiWeb Auto-Scaling group to scale-in (remove) 1 instance. Minimum is 1. Maximum is 100. Value shoule be between 1 and \"Scale-out threshold\"."
        },
        "FortiWebAsgScaleOutThreshold": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100, and be greater than \"Scale-in threshold\".",
            "Description": "The average CPU threshold (in percentage) for the FortiWeb Auto-Scaling group to scale-out (add) 1 instance. Minimum is 1. Maximum is 100. Value should be between \"Scale-in threshold\" and 100."
        },
        "FortiWebElbTgHealthyThreshold": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 3,
            "ConstraintDescription": "must be a valid number not less than 3.",
            "Description": "The number of consecutive health check failures required before considering a FortiWeb instance unhealthy. Minimum is 3."
        },
        "LoadBalancingOption": {
            "Type": "String",
            "Default": "add a new load balancer",
            "AllowedValues": [
                "add a new load balancer",
                "use a load balancer specified below"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Add an optional load balancer to route traffic to web service. You can choose your own one, but it needs to be created in the VPC above, and you need to configure its listener to point to our target group. Or we create one for you, you don't need to do any configuration."
        },
        "LoadBalancerDnsName": {
            "Type": "String",
            "Description": "(Optional) DNS Name of the Elastic Load Balancer which is used to route traffic. Specify if only you use your own one. If you choose to use your ELB, you need to configure the ELB listener to route HTTP and HTTPS traffic to the HTTP and HTTPS targetGroup we created."
        },
        "ElasticIPOption": {
            "Type": "String",
            "Default": "add a new Elastic IP",
            "AllowedValues": [
                "add a new Elastic IP",
                "use an Elastic IP specified below"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Create new or use existing Elastic IP to manage FortiWeb. Since autoscaling may create many instances, you need to log in to FortiWeb on this IP address to manage all FortiWeb instances. You can fill in the existing Elastic IP below, or let us create a new one for you. The default action is to use an existing Elastic IP."
        },
        "FortiWebElasticIP": {
            "Type": "String",
            "Default": "fwbASG-EIP",
            "Description": "Elastic IP address or name, through which you can manage FortiWeb. If you use an existing Elastic IP, fill it's IP address in here. If you create a new Elastic IP, give it a name so that you can find it easily in the AWS console.",
            "AllowedPattern": "^.+$",
            "ConstraintDescription": "must be a valid IP address format or a valid tag value."
        },
        "BalanceWebTrafficOverPortHTTP": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "Receive HTTP web service traffic through this port and load balance traffic to this port of Fortiweb. Minimum is 1. Maximum is 65535."
        },
        "BalanceWebTrafficOverPortHTTPS": {
            "Type": "Number",
            "Default": 443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "Receive HTTPS web service traffic through this port and load balance traffic to this port of Fortiweb. Minimum is 1. Maximum is 65535."
        },
        "FortiWebAdminPort": {
            "Type": "Number",
            "Default": 8443,
            "AllowedValues": [
                8443,
                8080
            ],
            "ConstraintDescription": "must be 8080 or 8443.",
            "Description": "A port number for FortiWeb administration. Use 8080 for HTTP access and 8443 for HTTPS access."
        },
        "FortiWebAdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is not recommended.",
            "Description": "CIDR block for external admin management access. **WARNING!** 0.0.0.0/0 accepts connections from any IP address. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses."
        },
        "KeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must specify an admin access key pair for FortiWeb instances.",
            "Description": "Amazon EC2 Key Pair for admin access."
        },
        "FortiWebAdminPassword": {
            "Type": "String",
            "NoEcho": true,
            "MinLength" : "8",
            "MaxLength": "16",
            "AllowedPattern" : "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*#?&])[A-Za-z0-9$@$!%*#?&]{8,16}$",
            "Description": "The admin password for deployed FortiWebs. The password needs to contain lowercase letters, uppercase letters, numbers, one of these special characters \"$@$!%*#?&\", and the length is between 8-16."
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "IfAddNewLoadBalancer": {
            "Fn::Equals": [
                {
                    "Ref": "LoadBalancingOption"
                },
                "add a new load balancer"
            ]
        },
        "IfAddNewElasticIP": {
            "Fn::Equals": [
                {
                    "Ref": "ElasticIPOption"
                },
                "add a new Elastic IP"
            ]
        },
        "IfAdminHTTP": {
            "Fn::Equals": [
                {
                    "Ref": "FortiWebAdminPort"
                },
                "8080"
            ]
        },
        "IfCustomBalanceWebTrafficOverHTTPSPort": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "BalanceWebTrafficOverPortHTTPS"
                        },
                        "0"
                    ]
                }
            ]
        },
        "IfCustomBalanceWebTrafficOverHTTPPort": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "BalanceWebTrafficOverPortHTTP"
                        },
                        "0"
                    ]
                }
            ]
        },
        "DeployOnDemandOnly": {
            "Fn::Equals": [
                {
                    "Ref": "FortiWebAsgCapacityBYOL"
                },
                "0"
            ]
        },
        "DeployBYOLOnly": {
            "Fn::Equals": [
                {
                    "Ref": "FortiWebAsgDesiredCapacityOnDemand"
                },
                "0"
            ]
        },
        "DeployHybrid": {
            "Fn::And": [
                { 
                    "Fn::Not": [{
                        "Fn::Equals": [
                            {
                                "Ref": "FortiWebAsgDesiredCapacityOnDemand"
                            },
                            "0"
                        ]
                    }]
                },
                {
                    "Fn::Not": [{
                        "Fn::Equals": [
                            {
                                "Ref": "FortiWebAsgCapacityBYOL"
                            },
                            "0"
                        ]
                    }]
                }
            ]
        }
    },
    "Mappings": {
    },
    "Resources": {
        "StackFindAMI": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "CodeS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "ZipCodeS3Key": {
                    	"Fn::Sub": [
                            "${QSS3KeyPrefix}functions/packages/find_ami.zip",
                            {
                                "QSS3KeyPrefix": {
                                    "Ref": "QSS3KeyPrefix"
                                }
                            }
                        ] 
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/find-ami.template",
                        {
                            "QSS3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "5"
             }
         },
        "StackCreateDynamoDBTable": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Fn::Select": [
                            0,
                            {
                                "Fn::Split": [
                                    "-",
                                    {
                                        "Fn::Select": [
                                            2,
                                            {
                                                "Fn::Split": [
                                                    "/",
                                                    {
                                                        "Ref": "AWS::StackId"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/create-db-table.template",
                        {
                            "QSS3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FwbAsgSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiWeb security group",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "FwbAsgSecurityGroupIngressInternal": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FwbAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": {
                    "Ref": "VPCCIDR"
                }
            }
        },
        "FwbAsgSecurityGroupIngressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FwbAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "FortiWebAdminCidr"
                }
            }
        },
        "FwbAsgSecurityGroupIngressAdminAccess": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FwbAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "FortiWebAdminPort"
                },
                "ToPort": {
                    "Ref": "FortiWebAdminPort"
                },
                "CidrIp": {
                    "Ref": "FortiWebAdminCidr"
                }
            }
        },
        "FwbAsgSecurityGroupIngressAdminAccessRedirect": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "IfAdminHTTP",
            "Properties": {
                "GroupId": {
                    "Ref": "FwbAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "8443",
                "ToPort": "8443",
                "CidrIp": {
                    "Ref": "FortiWebAdminCidr"
                }
            }
        },

        "FwbAsgSecurityGroupEgressInternal": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "FwbAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FwbSecurityGroupIngressAllowedTraffic1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "IfCustomBalanceWebTrafficOverHTTPSPort",
            "Properties": {
                "GroupId": {
                    "Ref": "FwbAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "BalanceWebTrafficOverPortHTTPS"
                },
                "ToPort": {
                    "Ref": "BalanceWebTrafficOverPortHTTPS"
                },
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FwbSecurityGroupIngressAllowedTraffic2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "IfCustomBalanceWebTrafficOverHTTPPort",
            "Properties": {
                "GroupId": {
                    "Ref": "FwbAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "BalanceWebTrafficOverPortHTTP"
                },
                "ToPort": {
                    "Ref": "BalanceWebTrafficOverPortHTTP"
                },
                "CidrIp": "0.0.0.0/0"
            }
        },
        "LaunchTemplateFwbAutoscaleOnDemand": {
            "Type": "AWS::EC2::LaunchTemplate",
            "DependsOn" : "StackFindAMI",
            "Properties": {
                "LaunchTemplateData": {
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Sub": [
                                "fwb_json_start {\"config-url\": \"${configUrl}\", \n\"initial_passwd\": \"${initial_passwd}\"}",
                                {
                                    "configUrl": {
                                        "Fn::Sub": [
                                            "https://${api}.execute-api.${region}.amazonaws.com/${stage}/${resource}",
                                            {
                                                "region": {
                                                    "Ref": "AWS::Region"
                                                },
                                                "api": {
                                                    "Ref": "ApiGatewayFwbAsg"
                                                },
                                                "stage": "prod",
                                                "resource": "complete"
                                            }
                                        ]
                                    },
                                    "initial_passwd": {
                                        "Fn::Base64" : {"Ref": "FortiWebAdminPassword"}
                                    }
                                }
                            ]
                        }
                    },
                    "InstanceInitiatedShutdownBehavior": "terminate",
                    "ImageId": {
                        "Fn::GetAtt": [
                            "StackFindAMI",
                            "Outputs.LatestOnDemandAmiId"
                        ]
                    },
                    "BlockDeviceMappings": [],
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": [
                                "IamInstanceProfileFwb",
                                "Arn"
                            ]
                        }
                    },
                    "InstanceType": {
                        "Ref": "FortiWebInstanceType"
                    },
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "Groups": [
                                {
                                    "Ref": "FwbAsgSecurityGroup"
                                }
                            ],
                            "AssociatePublicIpAddress": true
                        }
                    ],
                    "KeyName": {
                        "Ref": "KeyPairName"
                    },
                    "TagSpecifications": [{
                        "ResourceType": "instance",
                        "Tags": [{
                            "Key": "Name", 
                            "Value":  {
                                "Fn::Join": [
                                    "-",
                                    [
                                        {"Ref": "CustomIdentifier"},
                                        "OnDemand"
                                    ]
                                ]
                            }
                        }]
                    }]
                }
            },
            "DependsOn": [
                "IamInstanceProfileFwb"
            ]
        },
        "LaunchTemplateFwbAutoscaleBYOL": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateData": {
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Sub": [
                                "fwb_json_start {\"config-url\": \"${configUrl}\", \n\"initial_passwd\": \"${initial_passwd}\", \n\"cloud-initd\": \"enable\", \n\"bucket\": \"${S3Bucket}\", \n\"region\": \"${aws_region}\", \n\"license-dispather\":\"${licenseDispather}\"}",
                                {
                                    "configUrl": {
                                        "Fn::Sub": [
                                            "https://${api}.execute-api.${region}.amazonaws.com/${stage}/${resource}",
                                            {
                                                "region": {
                                                    "Ref": "AWS::Region"
                                                },
                                                "api": {
                                                    "Ref": "ApiGatewayFwbAsg"
                                                },
                                                "stage": "prod",
                                                "resource": "complete"
                                            }
                                        ]
                                    },
                                    "initial_passwd": {
                                        "Fn::Base64" : {"Ref": "FortiWebAdminPassword"}
                                    },
                                    "S3Bucket": {
                                        "Ref": "QSS3BucketName"
                                    },
                                    "aws_region": {
                                        "Ref" : "AWS::Region"
                                    },
                                    "licenseDispather": {
                                        "Fn::Sub": [
                                            "https://${api}.execute-api.${region}.amazonaws.com/${stage}/${resource}",
                                            {
                                                "region": {
                                                    "Ref": "AWS::Region"
                                                },
                                                "api": {
                                                    "Ref": "ApiGatewayFwbAsg"
                                                },
                                                "stage": "prod",
                                                "resource": "lic_dispatcher"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "InstanceInitiatedShutdownBehavior": "terminate",
                    "ImageId": {
                        "Fn::GetAtt": [
                            "StackFindAMI",
                            "Outputs.LatestBYOLAmiId"
                        ]
                    },
                    "BlockDeviceMappings": [],
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": [
                                "IamInstanceProfileFwb",
                                "Arn"
                            ]
                        }
                    },
                    "InstanceType": {
                        "Ref": "FortiWebInstanceType"
                    },
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "Groups": [
                                {
                                    "Ref": "FwbAsgSecurityGroup"
                                }
                            ],
                            "AssociatePublicIpAddress": true
                        }
                    ],
                    "KeyName": {
                        "Ref": "KeyPairName"
                    },
                    "TagSpecifications": [{
                        "ResourceType": "instance",
                        "Tags": [
                            {
                                "Key": "Name", 
                                "Value": {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            {"Ref": "CustomIdentifier"},
                                            "BYOL"
                                        ]
                                    ]
                                }
                            }
                        ]
                    }]
                }
            },
            "DependsOn": [
                "IamInstanceProfileFwb"
            ]
        },
        "FortiWebScalingGroupOnDemand": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "FortiWebAutoScalingGroupOnDemand",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "LaunchTemplateFwbAutoscaleOnDemand"
                    },
                    "Version": "1"
                },
                "Cooldown": {
                    "Ref": "FortiWebAsgCooldown"
                },
                "DesiredCapacity": {
                    "Ref": "FortiWebAsgDesiredCapacityOnDemand"
                },
                "HealthCheckGracePeriod": {
                    "Ref": "FortiWebAsgHealthCheckGracePeriod"
                },
                "HealthCheckType": "EC2",
                "MaxSize": {
                    "Ref": "FortiWebAsgMaxSizeOnDemand"
                },
                "MinSize": {
                    "Ref": "FortiWebAsgMinSizeOnDemand"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "TerminationPolicies": [
                    "Default"
                ],
                "TargetGroupARNs": [
                    { "Ref": "ElbV2HTTPSTargetGroupFwbAsg" },
                    { "Ref": "ElbV2HTTPTargetGroupFwbAsg" }
                ]
            },
            "DependsOn": [
                "LaunchTemplateFwbAutoscaleOnDemand",
                "ElbV2HTTPTargetGroupFwbAsg",
                "ElbV2HTTPSTargetGroupFwbAsg",
                "LambdaFunctionFwbAsg",
                "LambdaLicenseDispatcher",
                "PemApiGwCallLambdaLic"
            ]
        },
        "FortiWebScalingGroupBYOL": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "FortiWebAutoScalingGroupBYOL",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "LaunchTemplateFwbAutoscaleBYOL"
                    },
                    "Version": "1"
                },
                "Cooldown": {
                    "Ref": "FortiWebAsgCooldown"
                },
                "DesiredCapacity": {
                    "Ref": "FortiWebAsgCapacityBYOL"
                },
                "HealthCheckGracePeriod": {
                    "Ref": "FortiWebAsgHealthCheckGracePeriod"
                },
                "HealthCheckType": "EC2",
                "MaxSize": {
                    "Ref": "FortiWebAsgCapacityBYOL"
                },
                "MinSize": {
                    "Ref": "FortiWebAsgCapacityBYOL"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "TerminationPolicies": [
                    "Default"
                ],
                "TargetGroupARNs": [
                    { "Ref": "ElbV2HTTPSTargetGroupFwbAsg" },
                    { "Ref": "ElbV2HTTPTargetGroupFwbAsg" }
                ]
            },
            "DependsOn": [
                "LaunchTemplateFwbAutoscaleOnDemand",
                "ElbV2HTTPTargetGroupFwbAsg",
                "ElbV2HTTPSTargetGroupFwbAsg",
                "LambdaFunctionFwbAsg",
                "LambdaLicenseDispatcher",
                "PemApiGwCallLambdaLic"
            ]
        },
        "AsgScaleInPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "FortiWebScalingGroupOnDemand"
                },
                "ScalingAdjustment": "-1"
            },
            "DependsOn": [
                "FortiWebScalingGroupOnDemand"
            ]
        },
        "ScaleOutPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "FortiWebScalingGroupOnDemand"
                },
                "ScalingAdjustment": "1"
            },
            "DependsOn": [
                "FortiWebScalingGroupOnDemand"
            ]
        },
        "AlarmCpuUtilHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "FortiWebAsgScaleOutThreshold"
                },
                "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
                "Period": {
                    "Ref": "FortiWebAsgCooldown"
                },
                "AlarmActions": [
                    {
                        "Ref": "ScaleOutPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Fn::If": [
                            "DeployOnDemandOnly",
                            {
                                "Name": "AutoScalingGroupName",
                                "Value": {
                                    "Ref": "FortiWebScalingGroupOnDemand"
                                }
                            },
                            {
                                "Name": "AutoScalingGroupName",
                                "Value": {
                                    "Ref": "FortiWebScalingGroupBYOL"
                                }                            
                            }
                        ]
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "AlarmCpuUtilLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "FortiWebAsgScaleInThreshold"
                },
                "AlarmDescription": "Alarm if CPU too low or metric disappears indicating instance is down",
                "Period": {
                    "Ref": "FortiWebAsgCooldown"
                },
                "AlarmActions": [
                    {
                        "Ref": "AsgScaleInPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Fn::If": [
                            "DeployOnDemandOnly",
                            {
                                "Name": "AutoScalingGroupName",
                                "Value": {
                                    "Ref": "FortiWebScalingGroupOnDemand"
                                }
                            },
                            {
                                "Name": "AutoScalingGroupName",
                                "Value": {
                                    "Ref": "FortiWebScalingGroupBYOL"
                                }                            
                            }
                        ]
                    }
                ],
                "ComparisonOperator": "LessThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "LambdaFunctionFwbAsg": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "FwbAsg",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Runtime": "nodejs16.x",
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLfFwbAsg",
                        "Arn"
                    ]
                },
                "Handler": "index.AutoscaleHandler",
                "Timeout": 300,
                "Code": {
                    "S3Bucket": {
                        "Ref": "QSS3BucketName"
                    },
                    "S3Key": {
                        "Fn::Sub": [
                            "${QSS3KeyPrefix}functions/packages/lambda.zip",
                            {
                                "QSS3KeyPrefix": {
                                    "Ref": "QSS3KeyPrefix"
                                }
                            }
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "UNIQUE_ID": {
                            "Fn::Select": [
                                0,
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Fn::Select": [
                                                2,
                                                {
                                                    "Fn::Split": [
                                                        "/",
                                                        {
                                                            "Ref": "AWS::StackId"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "CUSTOM_ID": {
                            "Ref": "CustomIdentifier"
                        },
                        "AUTO_SCALING_GROUP_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiWebAutoScalingGroupOnDemand",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "AUTO_SCALING_GROUP_NAME_BYOL": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiWebAutoScalingGroupBYOL",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ElasticIP": {
                            "Fn::If" : [
                            "IfAddNewElasticIP",
                            {"Ref": "NewFortiWebElasticIP"},
                            {"Ref": "FortiWebElasticIP"}]
                        }
                    }
                }
            },
            "DependsOn": [
                "StackCreateDynamoDBTable"
            ]
        },
        "ApiGatewayFwbAsg": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "agwFwb",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "EndpointConfiguration": {
                    "Types": [
                        "REGIONAL"
                    ]
                },
                "Policy": "{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"execute-api:\\/*\\\"}]}"
            }
        },
        "ApiGwDeploymentFwbAsg": {
            "DependsOn": [
                "ApiGwMethodFwbAsgComplete",
                "ApiGwMethodFwbLicDispatcher"
            ],
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFwbAsg"
                },
                "StageName": "prod"
            }
        },
        "IamInstanceProfileFwb": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "IamRoleFwbInstance"
                    }
                ]
            }
        },
        "IamRoleFwbInstance": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*",
                                            {
                                                "QSS3BucketName": {
                                                    "Ref": "QSS3BucketName"
                                                },
                                                "QSS3KeyPrefix": {
                                                    "Ref": "QSS3KeyPrefix"
                                                }
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "aws-quick-start-s3-policy"
                    }
                ]
            }
        },
        "ApiGwResFwbAsgComplete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFwbAsg"
                },
                "PathPart": "complete",
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayFwbAsg",
                        "RootResourceId"
                    ]
                }
            }
        },
        "ApiGwMethodFwbAsgComplete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "ResourceId": {
                    "Ref": "ApiGwResFwbAsgComplete"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayFwbAsg"
                },
                "AuthorizationType": "NONE",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "LambdaFunctionFwbAsg",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                }
            }
        },
        "ApiGwResFwbLicDispatcher": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayFwbAsg"
                },
                "PathPart": "lic_dispatcher",
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayFwbAsg",
                        "RootResourceId"
                    ]
                }
            }
        },
        "ApiGwMethodFwbLicDispatcher": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "ResourceId": {
                    "Ref": "ApiGwResFwbLicDispatcher"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayFwbAsg"
                },
                "AuthorizationType": "NONE",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "LambdaLicenseDispatcher",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                }
            }
        },
        "IamRoleLfFwbAsg": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "autoscale-handler-inline-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:CreateTable",
                                        "dynamodb:DescribeTable",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem"
                                    ],
                                    "Resource": {
                                        "Fn::Split": [
                                            ",",
                                            {
                                                "Fn::GetAtt": [
                                                    "StackCreateDynamoDBTable",
                                                    "Outputs.DdbTableArnList"
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:CompleteLifecycleAction",
                                        "autoscaling:SetDesiredCapacity",
                                        "autoscaling:SetInstanceProtection"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:autoscaling:${AWS_REGION}:${AWS_ACCOUNT_ID}:autoScalingGroup:*:autoScalingGroupName/${ASG_NAME}",
                                            {
                                                "AWS_REGION": {
                                                    "Ref": "AWS::Region"
                                                },
                                                "AWS_ACCOUNT_ID": {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "ASG_NAME": {
                                                    "Fn::Join": [
                                                        "-",
                                                        [
                                                            {
                                                                "Ref": "CustomIdentifier"
                                                            },
                                                            "FortiWebAutoScalingGroupOnDemand",
                                                            {
                                                                "Fn::Select": [
                                                                    0,
                                                                    {
                                                                        "Fn::Split": [
                                                                            "-",
                                                                            {
                                                                                "Fn::Select": [
                                                                                    2,
                                                                                    {
                                                                                        "Fn::Split": [
                                                                                            "/",
                                                                                            {
                                                                                                "Ref": "AWS::StackId"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:CompleteLifecycleAction",
                                        "autoscaling:SetDesiredCapacity",
                                        "autoscaling:SetInstanceProtection"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:autoscaling:${AWS_REGION}:${AWS_ACCOUNT_ID}:autoScalingGroup:*:autoScalingGroupName/${ASG_NAME}",
                                            {
                                                "AWS_REGION": {
                                                    "Ref": "AWS::Region"
                                                },
                                                "AWS_ACCOUNT_ID": {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "ASG_NAME": {
                                                    "Fn::Join": [
                                                        "-",
                                                        [
                                                            {
                                                                "Ref": "CustomIdentifier"
                                                            },
                                                            "FortiWebAutoScalingGroupBYOL",
                                                            {
                                                                "Fn::Select": [
                                                                    0,
                                                                    {
                                                                        "Fn::Split": [
                                                                            "-",
                                                                            {
                                                                                "Fn::Select": [
                                                                                    2,
                                                                                    {
                                                                                        "Fn::Split": [
                                                                                            "/",
                                                                                            {
                                                                                                "Ref": "AWS::StackId"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:Describe*",
                                        "autoscaling:DescribeAutoScalingInstances",
                                        "dynamodb:ListTables"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeInstanceAttribute"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "apigateway:GET"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:apigateway:${AWS_REGION}::*",
                                            {
                                                "AWS_REGION": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:GetObject",
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:s3:::${bucketname}/${keyprefix}assets/configset/*",
                                            {
                                                "bucketname": {
                                                    "Ref": "QSS3BucketName"
                                                },
                                                "keyprefix": {
                                                    "Ref": "QSS3KeyPrefix"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeAddresses",
                                        "ec2:AssociateAddress",
                                        "ec2:DisassociateAddress"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ErAsgLifecycleHookTrigger": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "Fn::Sub": [
                        "{\"source\":[\"aws.autoscaling\"],\"detail-type\":[\"EC2 Instance Launch Successful\",\"EC2 Instance Launch Unsuccessful\",\"EC2 Instance-launch Lifecycle Action\", \"EC2 Instance Terminate Successful\",\"EC2 Instance Terminate unsuccessful\",\"EC2 Instance-terminate Lifecycle Action\"], \"detail\": {\"AutoScalingGroupName\": [\"${asg}\"]}}",
                        {
                            "asg": {
                                "Fn::Join": [
                                    "-",
                                    [
                                        {
                                            "Ref": "CustomIdentifier"
                                        },
                                        "FortiWebAutoScalingGroupOnDemand",
                                        {
                                            "Fn::Select": [
                                                0,
                                                {
                                                    "Fn::Split": [
                                                        "-",
                                                        {
                                                            "Fn::Select": [
                                                                2,
                                                                {
                                                                    "Fn::Split": [
                                                                        "/",
                                                                        {
                                                                            "Ref": "AWS::StackId"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "State": "ENABLED",
                "Description": "Trigger when FortiWeb auto-scaling group is launching / terminating instances or taking lifecycle actions.",
                "Targets": [
                    {
                        "Id": "erFortiWebAutoScalingTriggerToLambda",
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaFunctionFwbAsg",
                                "Arn"
                            ]
                        }
                    }
                ]
            }
        },
        "PemAsgLifecycleCallLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaFunctionFwbAsg"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ErAsgLifecycleHookTrigger",
                        "Arn"
                    ]
                }
            }
        },
        "PemApiGwCallLambdaAsg": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunctionFwbAsg",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${region}:${account}:${api}/*",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            },
                            "account": {
                                "Ref": "AWS::AccountId"
                            },
                            "api": {
                                "Ref": "ApiGatewayFwbAsg"
                            }
                        }
                    ]
                }
            },
            "DependsOn": [
                "ApiGatewayFwbAsg",
                "ApiGwDeploymentFwbAsg",
                "ApiGwResFwbAsgComplete",
                "ApiGwMethodFwbAsgComplete",
                "LambdaFunctionFwbAsg"
            ]
        },
        "PemApiGwCallLambdaLic": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaLicenseDispatcher",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${region}:${account}:${api}/*",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            },
                            "account": {
                                "Ref": "AWS::AccountId"
                            },
                            "api": {
                                "Ref": "ApiGatewayFwbAsg"
                            }
                        }
                    ]
                }
            },
            "DependsOn": [
                "ApiGatewayFwbAsg",
                "ApiGwDeploymentFwbAsg",
                "ApiGwResFwbLicDispatcher",
                "ApiGwMethodFwbLicDispatcher",
                "LambdaLicenseDispatcher"
            ]
        },
        "AsgLifeCycleHookLaunching": {
            "DependsOn": "LambdaFunctionFwbAsg",
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "FortiWebScalingGroupOnDemand"
                },
                "LifecycleHookName": "asgFwbAutoscaleLifecycleLaunching",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
                "HeartbeatTimeout": {
                    "Ref": "ExpireLifecycleEntry"
                },
                "DefaultResult": "ABANDON"
            }
        },
        "AsgLifeCycleHookTerminating": {
            "DependsOn": "LambdaFunctionFwbAsg",
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "FortiWebScalingGroupOnDemand"
                },
                "LifecycleHookName": "asgFwbAutoscaleLifecycleHookTerminating",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                "HeartbeatTimeout": {
                    "Ref": "ExpireLifecycleEntry"
                },
                "DefaultResult": "CONTINUE"
            }
        },
        "ElbV2HTTPTargetGroupFwbAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "HTTPtgFwb",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "TCP",
                "Port": {
                    "Ref": "BalanceWebTrafficOverPortHTTP"
                },
                "HealthCheckProtocol": "TCP",
                "HealthCheckPort": {
                    "Ref": "BalanceWebTrafficOverPortHTTP"
                },
                "HealthyThresholdCount": {
                    "Ref": "FortiWebElbTgHealthyThreshold"
                },
                "UnhealthyThresholdCount": {
                    "Ref": "FortiWebElbTgHealthyThreshold"
                },
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ElbV2HTTPSTargetGroupFwbAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "HTTPStgFwb",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "TCP",
                "Port": {
                    "Ref": "BalanceWebTrafficOverPortHTTPS"
                },
                "HealthCheckProtocol": "TCP",
                "HealthCheckPort": {
                    "Ref": "BalanceWebTrafficOverPortHTTPS"
                },
                "HealthyThresholdCount": {
                    "Ref": "FortiWebElbTgHealthyThreshold"
                },
                "UnhealthyThresholdCount": {
                    "Ref": "FortiWebElbTgHealthyThreshold"
                },
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "NewFortiWebElasticIP": {
            "Type" : "AWS::EC2::EIP",
            "Condition": "IfAddNewElasticIP",
            "Properties" : {
                "Tags": [
                    { "Key": "Name", "Value": {"Ref": "FortiWebElasticIP"} }
                ]
            }
        },
        "ElbV2LoadBalancerFwbAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Condition": "IfAddNewLoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Type": "network",
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "nlbFwb",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": [
                "ElbV2HTTPTargetGroupFwbAsg",
                "ElbV2HTTPSTargetGroupFwbAsg"
            ]
        },
        "ElbV2HTTPListenerFwbAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Condition": "IfAddNewLoadBalancer",
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "ElbV2LoadBalancerFwbAsg"
                },
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ElbV2HTTPTargetGroupFwbAsg"
                        }
                    }
                ],
                "Protocol": "TCP",
                "Port": {"Ref": "BalanceWebTrafficOverPortHTTP"}
            },
            "DependsOn": [
                "ElbV2LoadBalancerFwbAsg",
                "ElbV2HTTPTargetGroupFwbAsg"
            ]
        },
        "ElbV2HTTPSListenerFwbAsg": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Condition": "IfAddNewLoadBalancer",
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "ElbV2LoadBalancerFwbAsg"
                },
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ElbV2HTTPSTargetGroupFwbAsg"
                        }
                    }
                ],
                "Protocol": "TCP",
                "Port": {"Ref": "BalanceWebTrafficOverPortHTTPS"}
            },
            "DependsOn": [
                "ElbV2LoadBalancerFwbAsg",
                "ElbV2HTTPSTargetGroupFwbAsg"
            ]
        },
        "LambdaLicenseDispatcher": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "CustomIdentifier"
                            },
                            "FwblicDispather",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Fn::Select": [
                                                    2,
                                                    {
                                                        "Fn::Split": [
                                                            "/",
                                                            {
                                                                "Ref": "AWS::StackId"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Runtime": "python3.9",
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLfFwbAsg",
                        "Arn"
                    ]
                },
                "Handler": "handler.lambda_handler",
                "Timeout": 300,
                "Code": {
                    "S3Bucket": {
                        "Ref": "QSS3BucketName"
                    },
                    "S3Key": {
                        "Fn::Sub": [
                            "${QSS3KeyPrefix}functions/packages/lic_lambda.zip",
                            {
                                "QSS3KeyPrefix": {
                                    "Ref": "QSS3KeyPrefix"
                                }
                            }
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "UNIQUE_ID": {
                            "Fn::Select": [
                                0,
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Fn::Select": [
                                                2,
                                                {
                                                    "Fn::Split": [
                                                        "/",
                                                        {
                                                            "Ref": "AWS::StackId"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "CUSTOM_ID": {
                            "Ref": "CustomIdentifier"
                        },
                        "S3Bucket": {
                            "Ref": "QSS3BucketName"
                        },
                        "S3Prefix": {
                            "Ref": "QSS3KeyPrefix"
                        },
                        "BYOL_ASG_NAME": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "CustomIdentifier"
                                    },
                                    "FortiWebAutoScalingGroupBYOL",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Fn::Select": [
                                                            2,
                                                            {
                                                                "Fn::Split": [
                                                                    "/",
                                                                    {
                                                                        "Ref": "AWS::StackId"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            },
            "DependsOn": [
                "StackCreateDynamoDBTable"
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "VpcId",
                        "VPCCIDR",
                        "PublicSubnet1",
                        "PublicSubnet2"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiWeb configuration"
                    },
                    "Parameters": [
                        "CustomIdentifier",
                        "FortiWebVersionInternal",
                        "FortiWebInstanceType",
                        "FortiWebAdminPort",
                        "FortiWebAdminCidr",
                        "KeyPairName",
                        "FortiWebAdminPassword",
                        "ElasticIPOption",
                        "FortiWebElasticIP"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiWeb auto-scaling group configuration"
                    },
                    "Parameters": [
                        "FortiWebAsgCapacityBYOL",
                        "ExpireLifecycleEntry",
                        "FortiWebAsgMinSizeOnDemand",
                        "FortiWebAsgMaxSizeOnDemand",
                        "FortiWebAsgDesiredCapacityOnDemand",
                        "FortiWebAsgHealthCheckGracePeriod",
                        "FortiWebAsgCooldown",
                        "FortiWebAsgScaleOutThreshold",
                        "FortiWebAsgScaleInThreshold",
                        "FortiWebElbTgHealthyThreshold"
                    ]
                },
                {
                    "Label": {
                        "default": "Load balancing configuration"
                    },
                    "Parameters": [
                        "LoadBalancingOption",
                        "LoadBalancerDnsName",
                        "BalanceWebTrafficOverPortHTTP",
                        "BalanceWebTrafficOverPortHTTPS"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "CustomIdentifier": {
                    "default": "Resource name prefix"
                },
                "VpcId": {
                    "default": "VPC ID"
                },
                "PublicSubnet1": {
                    "default": "FortiWeb subnet 1"
                },
                "PublicSubnet2": {
                    "default": "FortiWeb subnet 2"
                },
                "FortiWebInstanceType": {
                    "default": "Instance type"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 bucket name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 key prefix"
                },
                "ExpireLifecycleEntry": {
                    "default": "Instance lifecycle expiry"
                },
                "FortiWebAsgCooldown": {
                    "default": "Scaling cooldown period"
                },
                "FortiWebAsgCapacityBYOL": {
                    "default": "Desired BYOL FortiWeb capacity"
                },
                "FortiWebAsgDesiredCapacityOnDemand": {
                    "default": "Desired On-Demand FortiWeb capacity"
                },
                "FortiWebAsgMinSizeOnDemand": {
                    "default": "Minimum On-Demand FortiWeb group size"
                },
                "FortiWebAsgMaxSizeOnDemand": {
                    "default": "Maximum On-Demand FortiWeb group size"
                },
                "FortiWebAsgHealthCheckGracePeriod": {
                    "default": "Health check grace period"
                },
                "FortiWebAsgScaleInThreshold": {
                    "default": "Scale-in threshold"
                },
                "FortiWebAsgScaleOutThreshold": {
                    "default": "Scale-out threshold"
                },
                "FortiWebElbTgHealthyThreshold": {
                    "default": "Healthy threshold"
                },
                "LoadBalancingOption": {
                    "default": "Load Balancer option"
                },
                "LoadBalancerDnsName": {
                    "default": "ELB DNS name"
                },
                "ElasticIPOption": {
                    "default": "FortiWeb Elastic IP option"
                },
                "FortiWebElasticIP": {
                    "default": "FortiWeb Elastic IP or Name"
                },
                "BalanceWebTrafficOverPortHTTP": {
                    "default": "HTTP web service traffic port"
                },
                "BalanceWebTrafficOverPortHTTPS": {
                    "default": "HTTPS web service traffic port"
                },
                "FortiWebAdminPort": {
                    "default": "Admin port"
                },
                "FortiWebAdminCidr": {
                    "default": "Admin CIDR block"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "FortiWebAdminPassword": {
                    "default": "Admin password"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                }
            }
        }
    }
}
